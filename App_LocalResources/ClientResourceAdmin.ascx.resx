<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Basic.Text" xml:space="preserve">
    <value>&lt;configuration&gt;
  &lt;nodes configfile="Web.config"&gt;
     
    &lt;node path="/configuration" action="update" targetpath="/configuration/clientDependency" collision="overwrite"&gt;  &lt;clientDependency version="{0}" fileDependencyExtensions=".js,.css"&gt;
    &lt;fileRegistration defaultProvider="LoaderControlProvider"&gt;
      &lt;providers&gt;
        &lt;add name="DnnBodyProvider" type="DotNetNuke.Web.Client.Providers.DnnBodyProvider, DotNetNuke.Web.Client" enableCompositeFiles="{1}" /&gt;
        &lt;add name="DnnFormBottomProvider" type="DotNetNuke.Web.Client.Providers.DnnFormBottomProvider, DotNetNuke.Web.Client" enableCompositeFiles="{1}" /&gt;
        &lt;add name="PageHeaderProvider" type="ClientDependency.Core.FileRegistration.Providers.PageHeaderProvider, ClientDependency.Core" enableCompositeFiles="{1}" /&gt;
        &lt;add name="LazyLoadProvider" type="ClientDependency.Core.FileRegistration.Providers.LazyLoadProvider, ClientDependency.Core" enableCompositeFiles="{1}" /&gt;
        &lt;add name="LoaderControlProvider" type="ClientDependency.Core.FileRegistration.Providers.LoaderControlProvider, ClientDependency.Core" enableCompositeFiles="{1}" /&gt;
      &lt;/providers&gt;
    &lt;/fileRegistration&gt;
    &lt;compositeFiles defaultFileProcessingProvider="CompositeFileProcessor" compositeFileHandlerPath="~/DependencyHandler.axd"&gt;
      &lt;fileProcessingProviders&gt;
        &lt;add name="CompositeFileProcessor" type="ClientDependency.Core.CompositeFiles.Providers.CompositeFileProcessingProvider, ClientDependency.Core" enableCssMinify="{2}" enableJsMinify="{3}" persistFiles="{4}" compositeFilePath="~/App_Data/ClientDependency" bundleDomains="" urlType="{5}" /&gt;
      &lt;/fileProcessingProviders&gt;
    &lt;/compositeFiles&gt;
  &lt;/clientDependency&gt;
    &lt;/node&gt;

  &lt;/nodes&gt;
&lt;/configuration&gt;</value>
  </data>
  <data name="CompositeFilesLabel.Help" xml:space="preserve">
    <value>Composite files are created to reduce the number of files requested by the client, if disabled, versioning will still take place, but the request reduction benefit will be lost.</value>
  </data>
  <data name="CompositeFilesLabel.Text" xml:space="preserve">
    <value>Enable composite files</value>
  </data>
  <data name="Error.Text" xml:space="preserve">
    <value>Woops, something went wrong.</value>
  </data>
  <data name="Full.Text" xml:space="preserve">
    <value>&lt;configuration&gt;
  &lt;nodes configfile="Web.config"&gt;
    &lt;node path="/configuration" action="update" targetpath="/configuration/clientDependency" collision="overwrite"&gt;
      &lt;clientDependency version="{0}" fileDependencyExtensions="{1}"&gt;
        &lt;fileRegistration defaultProvider="{2}"&gt;
          &lt;providers&gt;
            &lt;add name="DnnBodyProvider" type="DotNetNuke.Web.Client.Providers.DnnBodyProvider, DotNetNuke.Web.Client" enableCompositeFiles="{3}" /&gt;
            &lt;add name="DnnFormBottomProvider" type="DotNetNuke.Web.Client.Providers.DnnFormBottomProvider, DotNetNuke.Web.Client" enableCompositeFiles="{4}" /&gt;
            &lt;add name="PageHeaderProvider" type="ClientDependency.Core.FileRegistration.Providers.PageHeaderProvider, ClientDependency.Core" enableCompositeFiles="{5}"/&gt;
            &lt;add name="LazyLoadProvider" type="ClientDependency.Core.FileRegistration.Providers.LazyLoadProvider, ClientDependency.Core" enableCompositeFiles="{6}"/&gt;
            &lt;add name="LoaderControlProvider" type="ClientDependency.Core.FileRegistration.Providers.LoaderControlProvider, ClientDependency.Core" enableCompositeFiles="{7}"/&gt;
          &lt;/providers&gt;
        &lt;/fileRegistration&gt;
        &lt;compositeFiles defaultFileProcessingProvider="{8}" compositeFileHandlerPath="{9}"&gt;
          &lt;fileProcessingProviders&gt;
            &lt;add name="CompositeFileProcessor" type="ClientDependency.Core.CompositeFiles.Providers.CompositeFileProcessingProvider, ClientDependency.Core" enableCssMinify="{10}" enableJsMinify="{11}" persistFiles="{12}" compositeFilePath="{13}" bundleDomains="{14}" urlType="{15}" /&gt;
          &lt;/fileProcessingProviders&gt;
        &lt;/compositeFiles&gt;
      &lt;/clientDependency&gt;
    &lt;/node&gt;
  &lt;/nodes&gt;
&lt;/configuration&gt;</value>
    <comment>/*
                Overall
                  {0} version - integer text box
                  {1} file dependency extensions - text box - default ".js,.css"
                File registration providers
                  {2} default provider drop down
                  {3} - {7} enableCompositeFiles (for each provider)  
                Composite File Providers
                  {8} composite file handler path
                  {9} css minify
                  {10} js minify
                  {11} persist files
                  {12} composite file path
                  {13} bundle domains
                  {14} url type
                */</comment>
  </data>
  <data name="IncrementVersionButton.Text" xml:space="preserve">
    <value>Increment Version</value>
  </data>
  <data name="Intro.Text" xml:space="preserve">
    <value>&lt;p&gt;Here you may configure the Client Resource Management settings.&lt;/p&gt;
&lt;p&gt;If you are in a load-balanced environment please make sure that Url type is set to Base64QueryStrings. For more information about URL types, please visit See this link for more information: &lt;a href="http://clientdependency.codeplex.com/wikipage?title=CompositeUrlTypes&amp;referringTitle=Documentation"&gt;CompositeUrlTypes Documentation on CodePlex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For best performance, it is recommended to enable composite files and also to enable minification of CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;However, if you run into issues, you may either disable minification, or disable composite files altogether.&lt;/p&gt;
&lt;p&gt;Also: to disable composite files just for debugging purposes, simply set the web config's debug mode to "true."&lt;/p&gt;</value>
  </data>
  <data name="MinifyCssLabel.Help" xml:space="preserve">
    <value>CSS minification will be performed upon file combination. Uses custom regular expressions to remove comments, whitespace and "dead css" to reduce file size.</value>
  </data>
  <data name="MinifyCssLabel.Text" xml:space="preserve">
    <value>Minify CSS</value>
  </data>
  <data name="MinifyJsLabel.Help" xml:space="preserve">
    <value>JS minification will be performed upon file combination. Uses JSMin.</value>
  </data>
  <data name="MinifyJsLabel.Text" xml:space="preserve">
    <value>Minify JS</value>
  </data>
  <data name="PersistFilesLabel.Help" xml:space="preserve">
    <value>Persist files will save the combined files in the file system across application restarts. Deleting the files from the file system or incrementing the version are the only way to clear them from the cache.</value>
  </data>
  <data name="PersistFilesLabel.Text" xml:space="preserve">
    <value>Persist Files</value>
  </data>
  <data name="SaveButton.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Success.Text" xml:space="preserve">
    <value>Settings applied successfully. The web.config has been updated. Please &lt;a href="{0}"&gt;reload this page&lt;/a&gt; to see your changes.</value>
  </data>
  <data name="UrlTypeLabel.Help" xml:space="preserve">
    <value>Base64QueryStrings is generally the safest option. MappedId leads to better looking URLs, but will not work well in a load balanced environment.</value>
  </data>
  <data name="UrlTypeLabel.Text" xml:space="preserve">
    <value>URL Type</value>
  </data>
  <data name="VersionLabel.Help" xml:space="preserve">
    <value>The current version of client resources on this server. This version is incremented when an extension is installed, portal.css is updated, or when the cache is cleared. 
Incrementing the version simply re-creates the combined files (if enabled) and forces the client's browser to download the new version of the files (whether combining is enabled or not).</value>
  </data>
  <data name="VersionLabel.Text" xml:space="preserve">
    <value>Current Version</value>
  </data>
</root>