<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Basic.Text" xml:space="preserve">
    <value>&lt;configuration&gt;
  &lt;nodes configfile="Web.config"&gt;
     
    &lt;node path="/configuration" action="update" targetpath="/configuration/clientDependency" collision="overwrite"&gt;  &lt;clientDependency version="{0}" fileDependencyExtensions=".js,.css" loggerType="{6}"&gt;
    &lt;fileRegistration defaultProvider="LoaderControlProvider"&gt;
      &lt;providers&gt;
        &lt;add name="DnnBodyProvider" type="DotNetNuke.Web.Client.Providers.DnnBodyProvider, DotNetNuke.Web.Client" enableCompositeFiles="{1}" /&gt;
        &lt;add name="DnnFormBottomProvider" type="DotNetNuke.Web.Client.Providers.DnnFormBottomProvider, DotNetNuke.Web.Client" enableCompositeFiles="{1}" /&gt;
        &lt;add name="PageHeaderProvider" type="ClientDependency.Core.FileRegistration.Providers.PageHeaderProvider, ClientDependency.Core" enableCompositeFiles="{1}" /&gt;
        &lt;add name="LazyLoadProvider" type="ClientDependency.Core.FileRegistration.Providers.LazyLoadProvider, ClientDependency.Core" enableCompositeFiles="{1}" /&gt;
        &lt;add name="LoaderControlProvider" type="ClientDependency.Core.FileRegistration.Providers.LoaderControlProvider, ClientDependency.Core" enableCompositeFiles="{1}" /&gt;
      &lt;/providers&gt;
    &lt;/fileRegistration&gt;
    &lt;compositeFiles defaultFileProcessingProvider="CompositeFileProcessor" compositeFileHandlerPath="~/DependencyHandler.axd"&gt;
      &lt;fileProcessingProviders&gt;
        &lt;add name="CompositeFileProcessor" type="ClientDependency.Core.CompositeFiles.Providers.CompositeFileProcessingProvider, ClientDependency.Core" enableCssMinify="{2}" enableJsMinify="{3}" persistFiles="{4}" compositeFilePath="~/App_Data/ClientDependency" bundleDomains="" urlType="{5}" /&gt;
      &lt;/fileProcessingProviders&gt;
    &lt;/compositeFiles&gt;
  &lt;/clientDependency&gt;
    &lt;/node&gt;

  &lt;/nodes&gt;
&lt;/configuration&gt;</value>
  </data>
  <data name="CompositeFilesLabel.Help" xml:space="preserve">
    <value>Composite files are combinations of resources created to reduce the number of file requests by the browser.  This will significantly lower the page loading speed. Composite files are required for CSS and JS minification.</value>
  </data>
  <data name="CompositeFilesLabel.Text" xml:space="preserve">
    <value>Enable composite files</value>
  </data>
  <data name="ConfigurationUpdate.Message" xml:space="preserve">
    <value>The ClientDependency configuration has been updated through the Client Resource Admin. This triggered an application restart. The following values were saved:</value>
  </data>
  <data name="ConfigurationUpdate.Title" xml:space="preserve">
    <value>ClientDependency Configuration Update</value>
  </data>
  <data name="Error.Text" xml:space="preserve">
    <value>Woops, something went wrong: </value>
  </data>
  <data name="ErrorFileProcessing.Text" xml:space="preserve">
    <value>Unable to retrieve the ClientDependency file processing provider section from the web.config. Corresponding admin functions have been disabled.</value>
  </data>
  <data name="ErrorFileRegistration.Text" xml:space="preserve">
    <value>Unable to retrieve the ClientDependency file registration provider section from the web.config. Corresponding admin functions have been disabled.</value>
  </data>
  <data name="IncrementVersionButton.Confirm" xml:space="preserve">
    <value>Increasing the current version will change the web.config file and restart the website. This will impact performance while the site relaunches then force browsers to download new copies of the files. Are you sure you want to increment the current version?</value>
  </data>
  <data name="IncrementVersionButton.Text" xml:space="preserve">
    <value>Increment Version</value>
  </data>
  <data name="Intro.Text" xml:space="preserve">
    <value>&lt;div class="dnnFormMessage dnnFormInfo"&gt;
  &lt;p&gt;This module provides online management of the Client Resource Management settings.&lt;/p&gt;
  &lt;p&gt;It is recommended to enable all options for the best performance on a public website.  Disable all options for development environments and debugging.&lt;/p&gt;
  &lt;p&gt;Please note:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Minification and composite files can present new issues if the source isn't structure properly or the files are combined in the wrong order. Please read &lt;a href="http://www.dotnetnuke.com/Resources/Blogs/EntryId/3207/DNN-6-1-JS-CSS-File-Combination-Potential-Gotchas.aspx"&gt;caveats of minification and composite files&lt;/a&gt; for more information.&lt;/li&gt;
    &lt;li&gt;Load-balanced environments require Base64QueryStrings URL types. For more information about URL types, please read &lt;a href="http://clientdependency.codeplex.com/wikipage?title=CompositeUrlTypes&amp;referringTitle=Documentation"&gt;CompositeUrlTypes Documentation&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</value>
  </data>
  <data name="LoggerLabel.Help" xml:space="preserve">
    <value>When a logging provider is installed and enabled, it will be listed here. The logging provider makes sure that any issues that arise in the client resource framework are logged to the Event Viewer. An example of an issue that would get logged is when you register a file with the API, but that file doesn't actually exist on the disk.</value>
  </data>
  <data name="LoggerLabel.Text" xml:space="preserve">
    <value>Logger Type</value>
  </data>
  <data name="MinifyCssLabel.Help" xml:space="preserve">
    <value>CSS minification will reduce the size of the CSS code by using regular expressions to remove comments, whitespace and "dead css".  It is only available when composite files are enabled.</value>
  </data>
  <data name="MinifyCssLabel.Text" xml:space="preserve">
    <value>Minify CSS</value>
  </data>
  <data name="MinifyJsLabel.Help" xml:space="preserve">
    <value>JS minification will reduce the size of the JavaScript code using JSMin. It is only available when composite files are enabled.</value>
  </data>
  <data name="MinifyJsLabel.Text" xml:space="preserve">
    <value>Minify JS</value>
  </data>
  <data name="PersistFilesLabel.Help" xml:space="preserve">
    <value>Persist files will save the combined files in the file system across application restarts. This helps to prevent unnecessary server-side processing. Deleting the files from the file system or incrementing the version are the only way to clear them from the cache.</value>
  </data>
  <data name="PersistFilesLabel.Text" xml:space="preserve">
    <value>Persist Files</value>
  </data>
  <data name="SaveButton.Confirm" xml:space="preserve">
    <value>Saving these settings will change the web.config file and restart the website. This will impact performance while the site relaunches. Are you sure you want to save?</value>
  </data>
  <data name="SaveButton.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Success.Text" xml:space="preserve">
    <value>Settings applied successfully. The web.config has been updated. Please &lt;a href="{0}"&gt;reload this page&lt;/a&gt; to see your changes.</value>
  </data>
  <data name="UrlTypeLabel.Help" xml:space="preserve">
    <value>MappedID embeds the file details in the file name.  Base64QueryStrings appends the details in the query string. While MappedID creates cleaner URLs, Base64QueryStrings is generally safer because it doesn't rely as much on the file system and required for load balanced environments.</value>
  </data>
  <data name="UrlTypeLabel.Text" xml:space="preserve">
    <value>URL Type</value>
  </data>
  <data name="VersionIncremented.Message" xml:space="preserve">
    <value>The ClientDependency version was incremented through the Client Resource Admin module. This triggered an application restart.</value>
  </data>
  <data name="VersionIncremented.Title" xml:space="preserve">
    <value>ClientDependency Version Incremented</value>
  </data>
  <data name="VersionLabel.Help" xml:space="preserve">
    <value>To manage browser caching, client resources are assigned a version number. This number is increased when an extension is installed, portal.css is updated, or when the server cache is cleared.  It applies to any processed file (combined amd/or minified).  You can manually increase the number below to force browsers to download new copies of the resource files.</value>
  </data>
  <data name="VersionLabel.Text" xml:space="preserve">
    <value>Current Version</value>
  </data>
</root>